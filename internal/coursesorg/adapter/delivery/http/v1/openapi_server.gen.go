// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.1 DO NOT EDIT.
package v1

import (
	"context"
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /courses)
	GetAllCourses(w http.ResponseWriter, r *http.Request, params GetAllCoursesParams)

	// (POST /courses)
	CreateCourse(w http.ResponseWriter, r *http.Request)

	// (GET /courses/{courseId})
	GetCourse(w http.ResponseWriter, r *http.Request, courseId string)

	// (PATCH /courses/{courseId})
	EditCourse(w http.ResponseWriter, r *http.Request, courseId string)

	// (GET /courses/{courseId}/auxiliary-materials)
	GetAllCourseAuxiliaryMaterials(w http.ResponseWriter, r *http.Request, courseId string, params GetAllCourseAuxiliaryMaterialsParams)

	// (POST /courses/{courseId}/auxiliary-materials)
	AttachAuxiliaryMaterialToCourse(w http.ResponseWriter, r *http.Request, courseId string)

	// (GET /courses/{courseId}/collaborators)
	GetAllCourseCollaborators(w http.ResponseWriter, r *http.Request, courseId string)

	// (PUT /courses/{courseId}/collaborators)
	AddCollaboratorToCourse(w http.ResponseWriter, r *http.Request, courseId string)

	// (DELETE /courses/{courseId}/collaborators/{teacherId})
	RemoveCollaboratorFromCourse(w http.ResponseWriter, r *http.Request, courseId string, teacherId string)

	// (POST /courses/{courseId}/extended)
	ExtendCourse(w http.ResponseWriter, r *http.Request, courseId string)

	// (PUT /courses/{courseId}/groups)
	AddGroupToCourse(w http.ResponseWriter, r *http.Request, courseId string)

	// (GET /courses/{courseId}/students)
	GetAllCourseStudents(w http.ResponseWriter, r *http.Request, courseId string, params GetAllCourseStudentsParams)

	// (PUT /courses/{courseId}/students)
	AddStudentToCourse(w http.ResponseWriter, r *http.Request, courseId string)

	// (DELETE /courses/{courseId}/students/{studentId})
	RemoveStudentFromCourse(w http.ResponseWriter, r *http.Request, courseId string, studentId string)

	// (GET /courses/{courseId}/tasks)
	GetCourseTasks(w http.ResponseWriter, r *http.Request, courseId string, params GetCourseTasksParams)

	// (POST /courses/{courseId}/tasks)
	CreateTaskInCourse(w http.ResponseWriter, r *http.Request, courseId string)

	// (GET /courses/{courseId}/tasks/{taskNumber})
	GetCourseTask(w http.ResponseWriter, r *http.Request, courseId string, taskNumber int)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetAllCourses operation middleware
func (siw *ServerInterfaceWrapper) GetAllCourses(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllCoursesParams

	// ------------- Optional query parameter "title" -------------
	if paramValue := r.URL.Query().Get("title"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "title", r.URL.Query(), &params.Title)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter title: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllCourses(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateCourse operation middleware
func (siw *ServerInterfaceWrapper) CreateCourse(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateCourse(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetCourse operation middleware
func (siw *ServerInterfaceWrapper) GetCourse(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "courseId" -------------
	var courseId string

	err = runtime.BindStyledParameter("simple", false, "courseId", chi.URLParam(r, "courseId"), &courseId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter courseId: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCourse(w, r, courseId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// EditCourse operation middleware
func (siw *ServerInterfaceWrapper) EditCourse(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "courseId" -------------
	var courseId string

	err = runtime.BindStyledParameter("simple", false, "courseId", chi.URLParam(r, "courseId"), &courseId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter courseId: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.EditCourse(w, r, courseId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetAllCourseAuxiliaryMaterials operation middleware
func (siw *ServerInterfaceWrapper) GetAllCourseAuxiliaryMaterials(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "courseId" -------------
	var courseId string

	err = runtime.BindStyledParameter("simple", false, "courseId", chi.URLParam(r, "courseId"), &courseId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter courseId: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllCourseAuxiliaryMaterialsParams

	// ------------- Optional query parameter "resourceType" -------------
	if paramValue := r.URL.Query().Get("resourceType"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "resourceType", r.URL.Query(), &params.ResourceType)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter resourceType: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllCourseAuxiliaryMaterials(w, r, courseId, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AttachAuxiliaryMaterialToCourse operation middleware
func (siw *ServerInterfaceWrapper) AttachAuxiliaryMaterialToCourse(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "courseId" -------------
	var courseId string

	err = runtime.BindStyledParameter("simple", false, "courseId", chi.URLParam(r, "courseId"), &courseId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter courseId: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AttachAuxiliaryMaterialToCourse(w, r, courseId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetAllCourseCollaborators operation middleware
func (siw *ServerInterfaceWrapper) GetAllCourseCollaborators(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "courseId" -------------
	var courseId string

	err = runtime.BindStyledParameter("simple", false, "courseId", chi.URLParam(r, "courseId"), &courseId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter courseId: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllCourseCollaborators(w, r, courseId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AddCollaboratorToCourse operation middleware
func (siw *ServerInterfaceWrapper) AddCollaboratorToCourse(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "courseId" -------------
	var courseId string

	err = runtime.BindStyledParameter("simple", false, "courseId", chi.URLParam(r, "courseId"), &courseId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter courseId: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddCollaboratorToCourse(w, r, courseId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// RemoveCollaboratorFromCourse operation middleware
func (siw *ServerInterfaceWrapper) RemoveCollaboratorFromCourse(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "courseId" -------------
	var courseId string

	err = runtime.BindStyledParameter("simple", false, "courseId", chi.URLParam(r, "courseId"), &courseId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter courseId: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "teacherId" -------------
	var teacherId string

	err = runtime.BindStyledParameter("simple", false, "teacherId", chi.URLParam(r, "teacherId"), &teacherId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter teacherId: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RemoveCollaboratorFromCourse(w, r, courseId, teacherId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ExtendCourse operation middleware
func (siw *ServerInterfaceWrapper) ExtendCourse(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "courseId" -------------
	var courseId string

	err = runtime.BindStyledParameter("simple", false, "courseId", chi.URLParam(r, "courseId"), &courseId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter courseId: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ExtendCourse(w, r, courseId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AddGroupToCourse operation middleware
func (siw *ServerInterfaceWrapper) AddGroupToCourse(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "courseId" -------------
	var courseId string

	err = runtime.BindStyledParameter("simple", false, "courseId", chi.URLParam(r, "courseId"), &courseId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter courseId: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddGroupToCourse(w, r, courseId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetAllCourseStudents operation middleware
func (siw *ServerInterfaceWrapper) GetAllCourseStudents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "courseId" -------------
	var courseId string

	err = runtime.BindStyledParameter("simple", false, "courseId", chi.URLParam(r, "courseId"), &courseId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter courseId: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllCourseStudentsParams

	// ------------- Optional query parameter "fullName" -------------
	if paramValue := r.URL.Query().Get("fullName"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fullName", r.URL.Query(), &params.FullName)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter fullName: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllCourseStudents(w, r, courseId, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AddStudentToCourse operation middleware
func (siw *ServerInterfaceWrapper) AddStudentToCourse(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "courseId" -------------
	var courseId string

	err = runtime.BindStyledParameter("simple", false, "courseId", chi.URLParam(r, "courseId"), &courseId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter courseId: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddStudentToCourse(w, r, courseId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// RemoveStudentFromCourse operation middleware
func (siw *ServerInterfaceWrapper) RemoveStudentFromCourse(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "courseId" -------------
	var courseId string

	err = runtime.BindStyledParameter("simple", false, "courseId", chi.URLParam(r, "courseId"), &courseId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter courseId: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "studentId" -------------
	var studentId string

	err = runtime.BindStyledParameter("simple", false, "studentId", chi.URLParam(r, "studentId"), &studentId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter studentId: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RemoveStudentFromCourse(w, r, courseId, studentId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetCourseTasks operation middleware
func (siw *ServerInterfaceWrapper) GetCourseTasks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "courseId" -------------
	var courseId string

	err = runtime.BindStyledParameter("simple", false, "courseId", chi.URLParam(r, "courseId"), &courseId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter courseId: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCourseTasksParams

	// ------------- Optional query parameter "type" -------------
	if paramValue := r.URL.Query().Get("type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "type", r.URL.Query(), &params.Type)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter type: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "title" -------------
	if paramValue := r.URL.Query().Get("title"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "title", r.URL.Query(), &params.Title)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter title: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "description" -------------
	if paramValue := r.URL.Query().Get("description"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "description", r.URL.Query(), &params.Description)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter description: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCourseTasks(w, r, courseId, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateTaskInCourse operation middleware
func (siw *ServerInterfaceWrapper) CreateTaskInCourse(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "courseId" -------------
	var courseId string

	err = runtime.BindStyledParameter("simple", false, "courseId", chi.URLParam(r, "courseId"), &courseId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter courseId: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTaskInCourse(w, r, courseId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetCourseTask operation middleware
func (siw *ServerInterfaceWrapper) GetCourseTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "courseId" -------------
	var courseId string

	err = runtime.BindStyledParameter("simple", false, "courseId", chi.URLParam(r, "courseId"), &courseId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter courseId: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "taskNumber" -------------
	var taskNumber int

	err = runtime.BindStyledParameter("simple", false, "taskNumber", chi.URLParam(r, "taskNumber"), &taskNumber)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter taskNumber: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCourseTask(w, r, courseId, taskNumber)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/courses", wrapper.GetAllCourses)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/courses", wrapper.CreateCourse)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/courses/{courseId}", wrapper.GetCourse)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/courses/{courseId}", wrapper.EditCourse)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/courses/{courseId}/auxiliary-materials", wrapper.GetAllCourseAuxiliaryMaterials)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/courses/{courseId}/auxiliary-materials", wrapper.AttachAuxiliaryMaterialToCourse)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/courses/{courseId}/collaborators", wrapper.GetAllCourseCollaborators)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/courses/{courseId}/collaborators", wrapper.AddCollaboratorToCourse)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/courses/{courseId}/collaborators/{teacherId}", wrapper.RemoveCollaboratorFromCourse)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/courses/{courseId}/extended", wrapper.ExtendCourse)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/courses/{courseId}/groups", wrapper.AddGroupToCourse)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/courses/{courseId}/students", wrapper.GetAllCourseStudents)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/courses/{courseId}/students", wrapper.AddStudentToCourse)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/courses/{courseId}/students/{studentId}", wrapper.RemoveStudentFromCourse)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/courses/{courseId}/tasks", wrapper.GetCourseTasks)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/courses/{courseId}/tasks", wrapper.CreateTaskInCourse)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/courses/{courseId}/tasks/{taskNumber}", wrapper.GetCourseTask)
	})

	return r
}
